!SESSION 2023-11-04 11:54:02.807 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_SG
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\TEJESWARA\Desktop\NTU_SUBJECTS\Year3\OOPS\FinalProject\.metadata\.bak_8.log
Created Time: 2023-11-04 22:59:48.452

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 22:59:48.453
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 22:59:48.453
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 22:59:56.284
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 22:59:56.961
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
				if(isCampCommitteeMember) {
					CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				}
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1:
					student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 22:59:56.961
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 22:59:56.961
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 22:59:56.961
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 22:59:56.962
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 22:59:56.962
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:01:47.595
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:01:48.261
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:01:48.262
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:01:48.262
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:01:48.262
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:01:48.262
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:01:48.262
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:03:13.421
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:03:14.089
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ) {
				CampCommitteeMember student = ((CampCommitteeMember)loginUser);
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:03:14.090
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:14.090
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:14.090
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:03:14.090
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:14.090
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:03:28.241
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:03:28.864
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ) {
				CampCommitteeMember student = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:03:28.865
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:28.865
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:28.865
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:03:28.865
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:03:28.865
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:04:08.157
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:04:08.776
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ) {
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:04:08.776
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:08.777
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:08.777
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:04:08.777
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:08.777
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:04:40.392
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:04:41.018
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ) {
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:04:41.018
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:41.019
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:41.019
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:04:41.019
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:41.019
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:04:59.113
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:04:59.729
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ) {
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:04:59.730
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:59.730
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:59.730
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:04:59.731
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:04:59.731
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:14:04.621
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveablesList.lambda$2(SaveablesList.java:840)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveablesList.saveModels(SaveablesList.java:848)
	at org.eclipse.ui.internal.SaveablesList.saveModels(SaveablesList.java:812)
	at org.eclipse.ui.internal.Workbench.saveAll(Workbench.java:3410)
	at org.eclipse.ui.ide.IDE$1.run(IDE.java:1458)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.ide.IDE.saveAllEditors(IDE.java:1446)
	at org.eclipse.debug.internal.ui.launchConfigurations.SaveScopeResourcesHandler.doSave(SaveScopeResourcesHandler.java:228)
	at org.eclipse.debug.internal.ui.launchConfigurations.SaveScopeResourcesHandler.handleStatus(SaveScopeResourcesHandler.java:182)
	at org.eclipse.debug.internal.ui.sourcelookup.Prompter.lambda$0(Prompter.java:73)
	at org.eclipse.ui.internal.PendingSyncExec.run(PendingSyncExec.java:68)
	at org.eclipse.ui.internal.UILockListener.doPendingWork(UILockListener.java:172)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:19:32.343
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:19:33.059
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			//if(!isCampCommitteeMember)
			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:19:33.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:33.063
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:33.063
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:19:33.065
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:33.065
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:19:39.754
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:19:40.379
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:19:40.380
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:40.380
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:40.380
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:19:40.381
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:40.381
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:19:53.256
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:19:53.873
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				loginUser.printMenu();
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:19:53.874
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:53.874
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:53.874
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:19:53.874
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:19:53.874
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:22:54.808
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:22:55.425
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			else
				loginUser = (CampCommitteeMember) loginUser;
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				loginUser.printMenu();
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:22:55.426
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:22:55.426
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:22:55.426
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:22:55.426
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:22:55.426
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:23:20.044
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:23:23.840
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(isCampCommitteeMember)
				loginUser = (CampCommitteeMember) loginUser;

			loginUser.printMenu();
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				loginUser.printMenu();
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-04 23:23:23.844
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	... 18 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:23:23.844
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:23:23.844
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-04 23:23:23.846
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:326)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	... 18 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-11-04 23:23:23.847
!MESSAGE Index 2 out of bounds for length 2
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1056)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:274)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:23:24.864
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.core.resources 4 2 2023-11-04 23:25:01.127
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5070)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateIndex(DeltaProcessor.java:2875)
	at org.eclipse.jdt.internal.core.DeltaProcessor.updateCurrentDeltaAndIndex(DeltaProcessor.java:2718)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2332)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.traverseDelta(DeltaProcessor.java:2382)
	at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1983)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2157)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:307)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:297)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:160)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:388)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1514)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2394)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-04 23:25:01.798
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package CAMs;
import java.util.Scanner;
import java.io.FileReader;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.*;

enum UserType {
    STUDENT, STAFF
}

enum CampAvailability {
	SCHOOL, NTU
}

enum Schools {
	SCSE, ADM, EEE, NBS, SSS
}

public class CAMs {
	public static Scanner input = new Scanner(System.in);
	public static Camp committeeMemberCamp;
	public static boolean userFound, passwordMatch, logout;
	public static int choice = 0;
	public static boolean isCampCommitteeMember = false;
	
	public static List<Camp> allCamps = new ArrayList<>();
	public static List<User> users = new ArrayList<>();
	//public static HashMap<String, Camp> allCamps = new HashMap<>();
	public static CampDataManager campDataManager = new CampDataManager();
	public static UserDataManager userDataManager = new UserDataManager();
	//allCamps = CampDataManager.getAllCamps();
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		users = userDataManager.generateData("Student_List.txt", "Staff_List.txt");
		
		//Login Page
		System.out.println("Welcome to NTU CAMs!!!");
	
		//Check UserID & Password
		while(true) {
			System.out.println("Welcome to NTU CAMs!!!");
            System.out.println("1. Login");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            int choiceToOpen = input.nextInt();
            switch (choiceToOpen) {
            case 1:
            	//AuthenticationManager.login(users);
                login(users);
                choice = 0;
                break;
            case 2:
            	System.out.println("Goodbye!");
                input.close();
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Try again.");
                break;
            }	
		}
	}
	
	public static void login(List<User> users) {
		List<Camp> allCamps = CampDataManager.getAllCamps();
		System.out.println("LOGIN CREDENTIALS");
		User loginUser = getUsernamePassword(users);
		logout = false;
		while(!logout) {
			if(!isCampCommitteeMember)
				loginUser.printMenu();
			
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(loginUser.getUserType() == UserType.STUDENT) {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else if(loginUser.getUserType() == UserType.STAFF) {
					if(choice < 1  || choice > 5) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				else {
					if(choice < 1  || choice > 8) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
			}
			if(loginUser instanceof Student) {
				Student student = ((Student) loginUser);
//				if(isCampCommitteeMember) {
//					while (!logout) {
//	                    campCommitteeMenu(student);
//	                }
//				}
				switch(choice) {
				case 1: student.changePassword();
					logout = true;
					break;
				case 2: student.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(student);
					break;
				case 4: enquiryPage(student, allCamps);
					break;
				case 5: student.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(student, allCamps);
	                break;
				case 7: withdrawFromCamps(student);
					break;
				case 8:
				    student.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof Staff) {
				Staff staff = ((Staff) loginUser);
				switch(choice) {
				case 1: staff.changePassword();
					logout = true;
					break;
				case 2: CampSettings(staff);
					break;
				case 3: displaySuggestionInbox(staff);
					break;
				case 4: staff.viewAllCamps(allCamps);
					break;
				case 5: System.out.println("Thank you!!!");
					logout = true;
				}
			}
			else if(loginUser instanceof CampCommitteeMember ){
				loginUser.printMenu();
				CampCommitteeMember comMem = ((CampCommitteeMember)loginUser);
				switch(choice) {
				case 1: comMem.changePassword();
					logout = true;
					break;
				case 2: comMem.viewAvailableCamps(allCamps);	
					break;
				case 3: isCampCommitteeMember = registerForCamps(comMem);
					break;
				case 4: enquiryPage(comMem, allCamps);
					break;
				case 5: comMem.viewCampRegistrationDetails();
					break;
				case 6: viewRepliesToInquiries(comMem, allCamps);
	                break;
				case 7: withdrawFromCamps(comMem);
					break;
				case 8:
					comMem.viewCampCommitteeStatus();
				    break;	
				case 9: System.out.println("Thank you!!!");
					logout = true;
				}
			}
		}
	}
	
	public static User getUsernamePassword(List<User> users) {
		userFound = false;
		passwordMatch = false;
		while(!userFound) {
			System.out.print("UserID: ");    //Get username
			String userID = input.next();
			userID = userID.toUpperCase();   //UserID not case sensitive
			for(User user: users) {
				if(user.getUserID().equals(userID)) {
					userFound = true;
					while(!passwordMatch) {
						
						System.out.print("Password: ");   //Get Password
						String password = input.next();
					
						if(user.getPassword().equals(password)) {
							System.out.println("Login Successful.");
							if (user instanceof Student) {
			                    System.out.println("Welcome, student!"); // Handle student-specific functionality
			                } 
							else if (user instanceof Staff) {
			                    System.out.println("Welcome, staff!");  // Handle staff-specific functionality
			                }						
							return user;
						}
						else {
							System.out.println("Invalid Password!!! Try again");
						}
					}
				}
			}
			if(!userFound) {
				System.out.println("UserID invalid!!! Try again");
			}
		}
		return null;
	}
	
	public static void CampSettings(Staff staff) {
		staff.CampSettings();
		choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 4) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
		case 1: createCamp(staff);
			break;
		case 2:editCamp(staff);
			break;
		case 3: deleteCamp(staff);
			break;
		case 4: campListGenerate(staff);
		}
	}
	
	public static void createCamp(Staff staff) {
		
		System.out.print("Enter the name:");
		String campName = input.next();
		input.nextLine();
		System.out.print("Enter the Opening Date:");
		String openDate = input.next();
		System.out.print("Enter the Closing Date:");
		String closeDate = input.next();
		System.out.print("Enter the Registration Closing Date:");
		String regCloseDate = input.next();
		boolean found = false;
		CampAvailability campAccessible = CampAvailability.NTU;;
		Schools campSchool = null;
		while(!found) {
			System.out.print("Is the camp available to entire NTU(Y/N)");
			char inp  = input.next().charAt(0);
			if(inp == 'Y' || inp == 'y') {
				found = true;
			}
			else if(inp == 'N' || inp == 'n') {
				campAccessible = CampAvailability.SCHOOL;
				campSchool = staff.getFaculty();
				found = true;
			}
			else {
				System.out.println("Sorry invalid input. Try again!!!");
			}
		}
		System.out.print("Enter the Location:");
		String location = input.next();
		System.out.print("Enter the Total Slots in this camp:");
		input.nextLine();
		int totalSlots = input.nextInt();
		boolean checkInput = false;
		boolean visibility = true;
		while(!checkInput) {
			System.out.print("Do you want the camp to be visible to students(Y/N): ");
			input.nextLine();
			char visbilityChoice = input.nextLine().charAt(0);
			if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
				visibility = true;
				checkInput = true;
			}
			else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
				visibility = false;
				checkInput = true;
			}	
		}
		System.out.print("Description:");
		String description = input.next();
		input.nextLine();
		Staff staffIncharge = staff;
		Camp camp = new Camp(campName, openDate, closeDate, regCloseDate, campAccessible, campSchool, location, totalSlots, description, staffIncharge, visibility);
		staff.createCamp(camp, campDataManager);
		//allCamps = CampDataManager.getAllCamps();
			
	}
	
	public static void deleteCamp(Staff staff) {
		String[] campNames = staff.listCreatedCamps();
		staff.viewCreatedCamps();
		if(staff.numberOfCamps != 0) {
			System.out.println("Which camp you want to delete:");
			for(int i=0; i<staff.numberOfCamps; i++) {
				System.out.println("("+ (i+1) +")"+campNames[i]);
			}
			choice = 0;
			while(choice == 0) {
				System.out.println("Enter your choice:");
				choice = input.nextInt();
				if(choice < 1  || choice > staff.numberOfCamps) {
	            	System.out.println("Invalid Chocie! Try again");
	            	System.out.println("Enter your choice: ");
	            	choice = input.nextInt();
	            }
			}
			// Get camp to be deleted
			Camp camp = staff.getCamp(choice - 1);
			if(camp.getTotalSlots() == camp.getRemainingSlots()) {
				staff.deleteCamp(camp, campDataManager);
			}
			else {
				System.out.println("Sorry students have enrolled, so cannot delete the camp!!!");
			}
			
		}
	}
	
	 public static void editCamp(Staff staff) {
		 	String[] campNames = staff.listCreatedCamps();
		 	staff.viewCreatedCamps();
		 	if(staff.numberOfCamps != 0) {
			 	System.out.println("Which camp you want to Edit:");
				for(int i=0; i<staff.numberOfCamps; i++) {
					System.out.println("("+ (i+1) +")"+campNames[i]);
				}
				choice = 0;
				while(choice == 0) {
					System.out.println("Enter your choice:");
					choice = input.nextInt();
					if(choice < 1  || choice > staff.numberOfCamps) {
		            	System.out.println("Invalid Chocie! Try again");
		            	System.out.println("Enter your choice: ");
		            	choice = input.nextInt();
		            }
				}
				int choice2 = 0;
			 	while(choice2 != 10) {
				 	Camp camp = staff.getCamp(choice-1);
				 	camp.campMenu();
					choice2 = 0;
					while(choice2 == 0) {
						System.out.println("Enter your choice:");
						choice2 = input.nextInt();
						if(choice2 < 1  || choice2 > 10) {
			            	System.out.println("Invalid Chocie! Try again");
			            	System.out.println("Enter your choice: ");
			            	choice = input.nextInt();
			            }
					}
					switch(choice2) {
						case 1: System.out.print("Enter the new camp Name: ");
							input.nextLine();
							String newCampName = input.nextLine();
							camp.setCampName(newCampName);
							break;
						case 2: System.out.print("Enter the new Opening Date: ");
							String newOpenDate = input.next();
							camp.setOpenDate(newOpenDate);
							break;
						case 3: System.out.print("Enter the new Closing Date: ");
							input.nextLine();
							String newCloseDate = input.nextLine();
							camp.setCloseDate(newCloseDate);
							break;
						case 4: System.out.print("Enter the new Registration closing Date: ");
							input.nextLine();
							String newRegCloseDate = input.nextLine();
							camp.setRegCloseDate(newRegCloseDate);
							break;
						case 5: 
							if(camp.getCampAccessible() == CampAvailability.NTU) {
								camp.setCampAccessible(CampAvailability.SCHOOL);
								camp.setCampSchool(staff.getFaculty());
							}
							else {
								camp.setCampAccessible(CampAvailability.NTU);
							}
							break;
						case 6: System.out.print("Enter the new Total number of Slots: ");
							int newTotalSlots = input.nextInt();
							camp.setTotalSlots(newTotalSlots);
							break;
						case 7: System.out.print("Enter the new Location: ");
							input.nextLine();
							String newLocation = input.nextLine();
							camp.setlocation(newLocation);
							break;
						case 8: System.out.print("Enter the new Description: ");
							input.nextLine();
							String newDescription = input.nextLine();
							camp.setDescription(newDescription);
							break;
						case 9: boolean checkInput = false;
							while(!checkInput) {
								
								if(camp.getTotalSlots() == camp.getRemainingSlots()) {
									System.out.print("Do you want the camp to be visible to students(Y/N): ");
									input.nextLine();
									char visbilityChoice = input.nextLine().charAt(0);
									if(visbilityChoice == 'Y' || visbilityChoice == 'y') {
										camp.setVisiblity(true);
										checkInput = true;
									}
									else if(visbilityChoice == 'N' || visbilityChoice == 'n') {
										camp.setVisiblity(false);
										checkInput = true;
									}	
								}
								else {
									System.out.println("Sorry students have enrolled, so visibility of the camp cannot be changed!!!");
								}
							}
							break;
						case 10:
							break;
					}
			 	}
		 	}
		}
	
	 

//	 public static void displaySuggestionInbox(Staff staff) {
//	    List<Enquiry> suggestions = staff.getSuggestionInbox();
//
//	    if (suggestions.isEmpty()) {
//	        System.out.println("Your suggestion inbox is empty.");
//	    } else {
//	        System.out.println("Suggestion Inbox:");
//	        for (int i = 0; i < suggestions.size(); i++) {
//	            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
//	        }
//	        System.out.println("Do you want to reply?(Y/N)");
//	        char inputChoice = input.next().charAt(0);
//	        if(inputChoice == 'Y' || inputChoice == 'y') {
//	        	int replyChoice = 0;
//				while(replyChoice == 0) {
//					System.out.println("Which enquiry you want to reply?");
//					replyChoice = input.nextInt();
//					if(replyChoice < 1  || replyChoice > suggestions.size()) {
//		            	System.out.println("Invalid Chocie! Try again");
//		            	System.out.println("Which enquiry you want to reply?");
//		            	replyChoice = input.nextInt();
//		            }
//				}
//				System.out.print("Enter your reply:");
//				input.nextLine();
//				String reply = input.nextLine();
//				suggestions.get(replyChoice-1).setResponse(reply);
//				
//	        }
//	    }
//	}
	 
	 public static void displaySuggestionInbox(Staff staff) {
		    List<Enquiry> suggestions = staff.getSuggestionInbox();

		    if (suggestions.isEmpty()) {
		        System.out.println("Your suggestion inbox is empty.");
		    } else {
		        System.out.println("Suggestion Inbox:");
		        for (int i = 0; i < suggestions.size(); i++) {
		            System.out.println((i + 1) + ". " + suggestions.get(i).getQuestion());
		            if (suggestions.get(i).getResponse() != null) {
		                System.out.println("Response: " + suggestions.get(i).getResponse());
		            }
		        }

		        System.out.println("Do you want to reply to any suggestion? (Enter the number or 0 to skip)");
		        int replyChoice = input.nextInt();
		        input.nextLine(); // Consume newline

		        if (replyChoice > 0 && replyChoice <= suggestions.size()) {
		            staff.replyToSuggestion(suggestions.get(replyChoice - 1));
		        }
		    }
		}

	 
	 
	 public static boolean registerForCamps(Student student) {
		 	List<Camp> allCamps = CampDataManager.getAllCamps();
		 	if(allCamps.isEmpty())
		 		System.out.println("NotFound");
		 	else
		 		System.out.println("Found");
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    if(availableCamps.isEmpty()) {
		    	System.out.println("No camps are available");
		    	System.out.println(availableCamps.size());
		    }
		    else {
		    	System.out.println("Number of Camps Available: "+availableCamps.size());
		    	student.viewAvailableCamps(allCamps);
			    System.out.println("Enter the number of the camp you want to register for: ");
			    int campChoice = input.nextInt();
	
			    if (campChoice >= 1 && campChoice <= availableCamps.size()) {
			        Camp selectedCamp = availableCamps.get(campChoice - 1);
			        if (student.checkRegisterForCamp(selectedCamp)) {
			        	if(!student.isCampCommitteeMember) {
			        		boolean found = false;
			        		char committeeChoice = 'A';
			        		while(!found) {
			        			System.out.println("Do you want to register as Camp commitee Memeber:");
			        			input.nextLine();
			        			committeeChoice = input.nextLine().charAt(0);
			        			if(committeeChoice == 'Y' || committeeChoice == 'y') {
			        				committeeMemberCamp = selectedCamp;
			        				//student.addAsCommittee(selectedCamp);
			        				student.setCampCommitteeStatus(selectedCamp);
			        				 System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as committee member.");
			        				 return true;
			        			}
			        			else if(committeeChoice == 'N' || committeeChoice == 'n') {
			        				//selectedCamp.addAttendee(student);
			        				//student.addAsAttendee(selectedCamp);
			        				System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName() + " as attendee.");
			        				return false;
			        			}
			        			else {
			        				System.out.println("Invalid Choice!!! Try again");
			        			}
			        		}
			        	}
			        	else {
			        		System.out.println("You have successfully registered for the camp: " + selectedCamp.getCampName());
			        		return false;
			        	}
			        } else {
			            System.out.println("Registration failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
		    return false;
		}
	 
	 public static void withdrawFromCamps(Student student) {
		    List<Camp> registeredCamps = student.getRegisteredCamps();
		    boolean checkRegisteredCamps = student.viewCampRegistrationDetails(); // Show registered camps
		    if(checkRegisteredCamps) {
			    System.out.println("Enter the number of the camp you want to withdraw from: ");
			    int choice = input.nextInt();
	
			    if (choice >= 1 && choice <= registeredCamps.size()) {
			        Camp selectedCamp = registeredCamps.get(choice - 1);
			        if (student.checkWithdrawFromCamp(selectedCamp)) {
			            System.out.println("You have successfully withdrawn from the camp: " + selectedCamp.getCampName());
			        } else {
			            System.out.println("Withdrawal failed. Please try again.");
			        }
			    } else {
			        System.out.println("Invalid choice.");
			    }
		    }
	}
	 public static void submitEnquiry(Student student, List<Camp> allCamps) {
	        // Display available camps and let the student choose a camp
			 if(student.isCampCommitteeMember) {
					CampCommitteeMember committee = ((CampCommitteeMember) student);
					
			}
			 else {
				
		        List<Camp> availableCampsToEnquire = student.getAvailableCampsToEnquire(allCamps);
		        if (availableCampsToEnquire.isEmpty()) {
		            System.out.println("No available camps to submit inquiries.");
		        } else {
		            System.out.println("Available Camps:");
		            for (int i = 0; i < availableCampsToEnquire.size(); i++) {
		                System.out.println((i + 1) + ". " + availableCampsToEnquire.get(i).getCampName());
		            }
	
		            System.out.print("Enter the number of the camp to submit an inquiry: ");
		            int campChoice = input.nextInt();
	
		            if (campChoice >= 1 && campChoice <= availableCampsToEnquire.size()) {
		                Camp selectedCamp = availableCampsToEnquire.get(campChoice - 1);
		                input.nextLine(); // Consume newline
		                System.out.print("Enter your inquiry for the camp: ");
		                String inquiryText = input.nextLine();
		                Enquiry enquiry = new Enquiry(inquiryText, student);
		                student.submitEnquiry(selectedCamp, enquiry);
		                enquiry.setPostedBy(student);
		                
		             // After submitting the inquiry, allow the student to view, edit, or delete the inquiry
		                
		            } else {
		                System.out.println("Invalid camp choice.");
		            }
		        }
			 }
	   }
	 
	 public static void viewRepliesToInquiries(Student student, List<Camp> allCamps) {
		    List<Camp> availableCamps = student.getAvailableCamps(allCamps);
		    List<Enquiry> submittedEnquiries = student.getStudentEnquiries();

		    // Check if there are available camps to inquire about
		    if (submittedEnquiries.isEmpty()) {
		        System.out.println("You havent submitted any enquiry");
		        return;
		    }

		    // Display available camps
		    boolean replyGiven = false;
		    System.out.println("Enquiries Submitted:");
		    for (int i = 0; i < submittedEnquiries.size(); i++) {
		    	if(submittedEnquiries.get(i).getResponse() != null) {
		    		replyGiven = true;
		    		System.out.println((i + 1) + ". " + submittedEnquiries.get(i).getQuestion());
		    		System.out.println("Reply: " + submittedEnquiries.get(i).getResponse());
		    	}
		    }
		    if(!replyGiven) {
		    	System.out.println("No replies given yet!!!");
		    }
//		    else if(replyGiven) {
//			    // Prompt the student to select a camp
//			    System.out.print("Enter the number of the camp to view inquiries (or -1 to go back): ");
//			    int campChoice = input.nextInt();
//	
//			    if (campChoice == -1) {
//			        System.out.println("Going back to the main menu.");
//			        return; // Go back to the main menu
//			    } else if (campChoice >= 1 && campChoice <= availableCamps.size()) {
//			        Camp selectedCamp = availableCamps.get(campChoice - 1);
//	
//			        // Check if the student is registered for the selected camp
//			        if (student.isRegisteredForCamp(selectedCamp)) {
//			            // The student is registered for the camp, so they can view inquiries
//			            System.out.println("Inquiries for " + selectedCamp.getCampName() + ":");
//			            List<Enquiry> inquiries = selectedCamp.getStudentEnquiries();
//			            if (inquiries.isEmpty()) {
//			                System.out.println("No inquiries available for this camp.");
//			            } else {
//			                for (int i = 0; i < inquiries.size(); i++) {
//			                    System.out.println((i + 1) + ". " + inquiries.get(i));
//			                }
//			            }
//			        } else {
//			            System.out.println("You are not registered for this camp.");
//			        }
//			    } else {
//			        System.out.println("Invalid camp choice.");
//			    }
//		    }

	}
	public static void campListGenerate(Staff staff) {
		// TODO Auto-generated method stub
		List<Camp> createdCamps = staff.getCreatedCamps();
		staff.viewCreatedCamps();
		if(createdCamps.isEmpty()) {
			System.out.println("Sorry havent created any camps!!!");
		}
		else {
			System.out.println("Created Camps:");
            for (int i = 0; i < createdCamps.size(); i++) {
                System.out.println((i + 1) + ". " + createdCamps.get(i).getCampName());
            }
			Camp selectedCamp = null;
            boolean correctChoice = false;
            while(!correctChoice) {
            	System.out.print("Enter the camp number: ");
            	int campChoice = input.nextInt();

	            if (campChoice >= 1 && campChoice <= createdCamps.size()) {
	            	correctChoice = true;
	                selectedCamp = createdCamps.get(campChoice - 1);
	                input.nextLine(); // Consume newline
	                
	            } else {
	                System.out.println("Invalid camp choice.");
	            }
        	}
            List<Student> attendees = selectedCamp.getAttendees();
            if(attendees.isEmpty())
            	System.out.println("Sorry, no one have registered yet!!!");
            else {
	            System.out.println("List of attendess:");
	            for(int i=0;i<attendees.size();i++) {
	            	System.out.println("(" + (i+1) + ")" + attendees.get(i).getName());
	            }
            }
		}
		
	}
	
	public static void enquiryPage(Student student, List<Camp> allCamps) {
		System.out.println("Enquiry submitted successfully.");
        System.out.println("1. Add Enquiries");
        System.out.println("2. View Enquiries");
        System.out.println("3. Edit Enquiry");
        System.out.println("4. Delete Enquiry");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        int inquiryActionChoice = input.nextInt();
        List<Enquiry> studentEnquiries = student.getStudentEnquiries();
        switch (inquiryActionChoice) {
        	case 1: submitEnquiry(student, allCamps);
        		break;
            case 2:
            	if(studentEnquiries.isEmpty())
            		System.out.println("Sorry no enquiries done to display");
            	else
            		student.viewEnquiries();
                break;
            case 3:
            	 if (studentEnquiries.isEmpty()) {
            	        System.out.println("No inquiries available to edit.");
            	    } else {
            	        System.out.println("Available Inquiries:");
            	        for (int i = 0; i < studentEnquiries.size(); i++) {
            	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
            	        }
            	        System.out.print("Enter the number of the inquiry you want to edit: ");
            	        int editChoice = input.nextInt();
            	        if (editChoice >= 1 && editChoice <= studentEnquiries.size()) {
            	            input.nextLine(); // Consume newline
            	            System.out.print("Enter the new text for the inquiry: ");
            	            String newInquiryText = input.nextLine();
            	            // Edit the selected inquiry
            	            student.editEnquiry(studentEnquiries.get(editChoice - 1).getQuestion(), newInquiryText);
            	        } else {
            	            System.out.println("Invalid choice.");
            	        }
            	    }
            	    break;
        	case 4:
        	    if (studentEnquiries.isEmpty()) {
        	        System.out.println("No inquiries available to delete.");
        	    } else {
        	        System.out.println("Available Inquiries:");
        	        for (int i = 0; i < studentEnquiries.size(); i++) {
        	            System.out.println((i + 1) + ". " + studentEnquiries.get(i).getQuestion());
        	        }
        	        System.out.print("Enter the number of the inquiry you want to delete: ");
        	        int deleteChoice = input.nextInt();
        	        if (deleteChoice >= 1 && deleteChoice <= studentEnquiries.size()) {
        	            // Delete the selected inquiry
        	            student.deleteEnquiry(studentEnquiries.get(deleteChoice - 1).getQuestion());
        	        } else {
        	            System.out.println("Invalid choice.");
        	        }
        	    }
        	    break;
            case 5:
                // Return to the main menu
                break;
            default:
                System.out.println("Invalid choice.");
        }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesRemoving(JavaModelManager.java:5126)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypesMerging(JavaModelManager.java:4935)
	at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypes(JavaModelManager.java:4897)
	at org.eclipse.jdt.internal.core.NameLookup.findSecondaryType(NameLookup.java:712)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:1000)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:188)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1806)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:619)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:1735)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1665)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:1664)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedJavaBaseType(LookupEnvironment.java:1677)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangEnum(Scope.java:2894)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectEnumSuperclass(ClassScope.java:1223)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:1171)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:1454)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:521)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:881)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:394)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1038)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1111)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:282)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
