package CAMs;

import java.util.ArrayList;
import java.util.List;

public class Staff extends User{
	int i;
	int numberOfCamps = 0;
	CampDataManager campDataManager = new CampDataManager();
	String name;
	String email;
	String faculty;
	private List<Camp> campsCreated = new ArrayList<>();
	
	public Staff(String name, String email, String faculty) {
		super(name, email, faculty);
	}
	public UserType getUserType() {return UserType.STAFF;}
	
	public void printMenu() {
		System.out.println("**********STAFF LOGIN MENU**********");
		System.out.println("(1) Change Password");
		System.out.println("(2) Camp Settings");
		System.out.println("(3) Suggestions Inbox");
		System.out.println("(4) Camp Report Generation");
		System.out.println("(5) Logout");
	}
	public void CampSettings() {
		System.out.println("**********CAMP SETTINGS*********");
		System.out.println("(1) Create Camp");
		System.out.println("(2) Edit Camp");
		System.out.println("(3) Delete Camp");
		System.out.println("(4) Back");
	}
	public void createCamp(Camp camp) {
		this.campsCreated.add(camp);
		campDataManager.addCamp(camp);
		numberOfCamps += 1;
	}
	
	public void deleteCamp(Camp camp) {
        // Delete a camp
		if(this.numberOfCamps == 0)
			System.out.println("No camps created yet!!!");
		else {
			if(campsCreated.contains(camp)) {
				campsCreated.remove(camp);
				numberOfCamps--;
			}
		}
    }

    public void toggleCampVisibility(Camp camp, boolean isVisible) {
        // Toggle the visibility of the camp
    	
    }

    public void viewAllCamps() {
        // View all camps
    	List<Camp> allCamps = campDataManager.getAllCamps();
    	System.out.println("List of All Camps:");
        if (allCamps.isEmpty()) {
            System.out.println("No camps available.");
        } else {
            for (Camp camp : allCamps) {
                System.out.println(camp.getCampName());
            }
        }
    }
    
    public String[] listCreatedCamps() {
    	String[] campNames = new String[this.numberOfCamps];
    	for(Camp camp : campsCreated) {
			camp.getCampName();
		}
    	return 
    }

    public void viewCreatedCamps() {
        // View the camps created by this staff
    	if(numberOfCamps == 0)
			System.out.println("Not created any Camps");
		else {
			int count = 1;
			for(Camp camp : campsCreated) {
				System.out.println("CAMP "+ (count++) + ":");
				camp.campInfo();
				camp.campMenu();
				boolean exitEditMode = this.editCamp(camp);
				if(exitEditMode)
					break;
			}
		}
    }
    
    public boolean editCamp(Camp camp) {
		int choice = 0;
		while(choice == 0) {
			System.out.println("Enter your choice:");
			choice = input.nextInt();
			if(choice < 1  || choice > 10) {
            	System.out.println("Invalid Chocie! Try again");
            	System.out.println("Enter your choice: ");
            	choice = input.nextInt();
            }
		}
		switch(choice) {
			case 1: System.out.print("Enter the new camp Name: ");
				String newCampName = input.next();
				camp.setCampName(newCampName);
				break;
			case 2: System.out.print("Enter the new Opening Date: ");
				String newOpenDate = input.next();
				camp.setOpenDate(newOpenDate);
				break;
			case 3: System.out.print("Enter the new Closing Date: ");
				String newCloseDate = input.next();
				camp.setCloseDate(newCloseDate);
				break;
			case 4: System.out.print("Enter the new Registration closing Date: ");
				String newRegCloseDate = input.next();
				camp.setRegCloseDate(newRegCloseDate);
				break;
			case 5: 
				if(camp.getCampAccessible() == CampAvailability.NTU) {
					camp.setCampAccessible(CampAvailability.SCHOOL);
				}
				else {
					camp.setCampAccessible(CampAvailability.NTU);
				}
				break;
			case 6: System.out.print("Enter the new Total number of Slots: ");
				int newTotalSlots = input.nextInt();
				camp.setTotalSlots(newTotalSlots);
				break;
			case 7: System.out.print("Enter the new Location: ");
				String newLocation = input.next();
				camp.setlocation(newLocation);
				break;
			case 8: System.out.print("Enter the new Description: ");
				String newDescription = input.next();
				camp.setDescription(newDescription);
				break;
			case 9: return false;
			case 10: return true;
		}
		return false;
	}
    
//    public void editCamps() {
//    	this.viewCreatedCamps();
//    	int choice = 0;
//    	while(choice == 0) {
//	    	for(i=0; i<this.numberOfCamps; i++) {
//	    		System.out.println("("+ +") " + )
//	    	}
//    }
    
    

//    public void replyToEnquiries(Camp camp, String studentEnquiry) {
//        // Reply to student enquiries
//    }
//
//    public void approveSuggestion(Camp camp, String suggestion) {
//        // Approve suggestions for camp changes
//    }
//
//    public void generateCampAttendeesReport(Camp camp, String filter, String format) {
//        // Generate a report of camp attendees with filtering options
//    }
//
//    public void generatePerformanceReport() {
//        // Generate a performance report of camp committee members
//    }

}
