package CAMs;

import java.util.ArrayList;
import java.util.List;

public class StudentAvailableCamps implements AvailableCamps {
	static RegistrationCamps campRegistration = new StudentRegistrationCamps();
	public List<Camp> viewAvailableCamps(List<Camp> camps, Student student) {
        // Iterate through camps and check if they are open to the student's user group
    	List<Camp> storeCamps = new ArrayList<>(); 
		boolean found = false;
		
        for (Camp camp : camps) {
        	if((camp.getCampAccessible() == CampAvailability.NTU  
        			|| camp.getCampSchool() == student.getFaculty()) 
	    			&& camp.getRemainingSlots() > 0
	    			&& ((StudentRegistrationCamps) campRegistration).isRegistrationOpen(camp)
	    			&& camp.getVisibility() == true
	    			&& student.isCampMember(camp) == false) {
        			storeCamps.add(camp);
        			found = true;
            }
        }
        if(!found) {
    		System.out.println("No camps Available");
    	}
        else {
        	storeCamps = FilterVisibility.filterVisibility(storeCamps);
        	student.printAvailableCamps(storeCamps);
        }
        return storeCamps;
    }
	public List<Camp> getAvailableCamps(List<Camp> allCamps, Student student) {
	    List<Camp> availableCamps = new ArrayList<>();
	    for (Camp camp : allCamps) { // Assuming allCamps is a list of all available camps
	    	if((camp.getCampAccessible() == CampAvailability.NTU  
        			|| camp.getCampSchool() == student.getFaculty()) 
	    			&& camp.getRemainingSlots() > 0
	    			&& ((StudentRegistrationCamps) campRegistration).isRegistrationOpen(camp)
	    			&& camp.getVisibility() == true
	    			&& student.isCampMember(camp) == false) {
	    				availableCamps.add(camp);
	    	}
	    }
	    return availableCamps;
	}
    public boolean isCampMember(Camp camp) {
		List<Student> registeredStudents = camp.getAttendees();
		for(Student students: registeredStudents) {
			if(students.equals(this)) {
				return true;
			}
		}
		return false;
	}
	
	public List<Camp> getAvailableCampsToEnquire(List<Camp> allCamps, Student student) {
		AvailableCamps availCamps = new StudentAvailableCamps();
	    List<Camp> availableCampsToEnquire = new ArrayList<>();
	    List<Camp> availableCamps = availCamps.getAvailableCamps(allCamps, student);
	    List<Camp> registeredCamps = student.getRegisteredCamps();
	    for (Camp camp : allCamps) { // Assuming allCamps is a list of all available camps
	    	if(availableCamps.contains(camp)) {
	    		availableCampsToEnquire.add(camp);
	    	}
	    }
	    for(int i=0; i<registeredCamps.size(); i++) {
	    	availableCampsToEnquire.add(registeredCamps.get(i));
	    }
	    return availableCampsToEnquire;
	}
}
