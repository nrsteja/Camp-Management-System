package CAMs;

import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
/**
Includes information of all the camps including list of students registered as attendees and camp committee
@author Jeevika, Mathangi, Teja, Vikaas
@version 3.0
@since 2023-11-25
*/
public class Camp {
	/**
	 * Integer value that holds the total number of camps. Initially this is zero.
	 */
	public int totalCamps = 0;
	private String campName;
	private String openDate;
	private String closeDate;
	private String regCloseDate;
	/**
	 * Represents the availability status of the camp.
	 * This field is used to track the accessibility of the camp.
	 *
	 * @see CampAvailability
	 */
	private CampAvailability campAccessible;
	private String location;
	/**
	 * Integer value that holds the available slots.
	 */
	public int slotsAvailable;
	/**
	 * Integer value that holds the total number of slots.
	 */
	public int totalSlots;
	/**
	 * Represents the staff that is incharge.
	 */
	public Staff staffIncharge;
	private String description;
	private List<Student> students;
	private boolean visibility;
	/**
	 * Represents the school associated with a camp.
	 * This field holds an instance of the {@link Schools} class.
	 */
	private Schools campSchool;
	private List<Suggestion> approvedSuggestions = new ArrayList<>();
	private List<Student> attendees;
	private List<CampCommitteeMember> comMems = new ArrayList<>();
    //private List<String> studentEnquiries;
	private List<Enquiry> studentEnquiries;
    private List<Suggestion> suggestions;
    private List<String> replies;
    private List<Student> studentsWhoWithdrawn = new ArrayList<>();

    /**
	 * Static Scanner object for reading input from the standard input (System.in).
	 */
	public static Scanner input = new Scanner(System.in);
	/**
	 * Static instance used to perform validation and error checking on user inputs.
	 */
	public static InputErrorChecking inputErrorChecking = new InputErrorChecking();
	/**
     * Constructs new Camp with the specified parameters.
     *
     * @param campName        The name of the camp.
     * @param openDate        The opening date of the camp in the format "yyyy-mm-dd".
     * @param closeDate       The closing date of the camp in the format "yyyy-mm-dd".
     * @param regCloseDate    The registration closing date of the camp in the format "yyyy-mm-dd".
     * @param campAccessible  The availability status of the camp.
     * @param campSchool      The school associated with the camp.
     * @param location        The location of the camp.
     * @param totalSlots      The total number of slots available in the camp.
     * @param description     The description of the camp.
     * @param staffIncharge   The staff member in charge of the camp.
     * @param visibility      The visibility status of the camp for students.
     */
	public Camp(String campName, String openDate, String closeDate, String regCloseDate, CampAvailability campAccessible, Schools campSchool, String location, int totalSlots, String description, Staff staffIncharge, boolean visibility) {
		this.campName = campName;
		this.openDate = openDate;
		this.closeDate = closeDate;
		this.regCloseDate = regCloseDate;
		this.campAccessible = campAccessible;
		this.campSchool = campSchool;
		this.location = location;
		this.totalSlots = totalSlots;
		this.description = description;
		this.staffIncharge = staffIncharge;
		this.totalCamps+=1;
		this.visibility = visibility;
		
		replies = new ArrayList<>();
		attendees = new ArrayList<>();
        studentEnquiries = new ArrayList<>();
        suggestions = new ArrayList<>();
        students = new ArrayList<>();
	}
	/**
	 * Adds a suggestion to the collection of approved suggestions.
	 *
	 * @param suggestion The suggestion to be added to the approved suggestions.
	 */
	public void setApprovedSuggestions(Suggestion suggestion) {
		approvedSuggestions.add(suggestion);
	}

	public void addEnquiry(Enquiry enquiry) { studentEnquiries.add(enquiry);}
    public List<Enquiry> getEnquiries() { return studentEnquiries;}
	public int getRemainingSlots() { return totalSlots - attendees.size()-comMems.size();}
	public void addCommitteeMember(CampCommitteeMember comMem) {this.comMems.add(comMem);}
	public List<CampCommitteeMember> getCommitteeMemberes() { return this.comMems;}
	
	public List<CampCommitteeMember> getCommitteeMembers() { return comMems;}
	public List<String> getReplies() { return replies;}
    public void storeReply(String reply) { replies.add(reply);}	
	public List<Student> getAttendees() { return attendees;}
    public void addAttendee(Student student) { attendees.add(student);}
    public void removeAttendee(Student student) { attendees.remove(student);}
    public List<Enquiry> getStudentEnquiries() { return studentEnquiries;}
    public List<Suggestion> getSuggestions() { return suggestions;}
    public void removeStudentEnquiry(Enquiry enquiry) { staffIncharge.removeSuggestionFromInbox(enquiry);}

    public void addStudentEnquiry(Enquiry enquiry) {
        studentEnquiries.add(enquiry);
        staffIncharge.addSuggestionToInbox(enquiry);
    }

    public void addSuggestion(Suggestion suggestion) {
        suggestions.add(suggestion);
        staffIncharge.addSuggestionToInbox(suggestion);
    }
	
	//Accessor or Getter
	public String getCampName() { return this.campName;}
	public String getOpenDate() { return this.openDate;}
	public String getCloseDate() { return this.closeDate;}
	public Schools getCampSchool() { return this.campSchool;}
	public String getRegCloseDate() { return this.regCloseDate;}
	public CampAvailability getCampAccessible() { return this.campAccessible;}
	public String getLocation() { return this.location;}
	public int getTotalSlots() { return this.totalSlots;}
	public Staff getStaffIncharge() { return this.staffIncharge;}
	public String getDescription() { return this.description;}
	public boolean getVisibility() { return this.visibility;}
	
	//Mutator or Setters
	public void setCampName(String campName) { this.campName = campName;}
	public void setOpenDate(String openDate) { this.openDate = openDate;}
	public void setCloseDate(String closeDate) { this.closeDate = closeDate;}
	public void setCampSchool(Schools campSchool) { this.campSchool = campSchool;}
	public void setRegCloseDate(String regCloseDate) { this.regCloseDate = regCloseDate;}
	public void setCampAccessible(CampAvailability campAccessible) { this.campAccessible = campAccessible;}
	public void setlocation(String location) { this.location = location;}
	public void setTotalSlots(int totalSlots) { this.totalSlots = totalSlots;}
	public void setStaffIncharge(Staff staffIncharge) { this.staffIncharge = staffIncharge;}
	public void setDescription(String description) { this.description = description;}
	public void setVisiblity(boolean visiblity) {this.visibility = visiblity;}
	public int noOfCamps() { return totalCamps;}
	
	public void campMenu() {
		System.out.println("Edit Menu");
		System.out.println("(1) Camp Name");
		System.out.println("(2) Opening Date(yyyy-mm-dd)");
		System.out.println("(3) Closing Date(yyyy-mm-dd)");
		System.out.println("(4) Registration closing Date(yyyy-mm-dd)");
		System.out.println("(5) Camp Availability");
		System.out.println("(6) Total Slots");
		System.out.println("(7) Location");
		System.out.println("(8) Description");
		System.out.println("(9) Visibility for Students");
		System.out.println("(10) Exit");
	}
	
	
	public void deleteStudentEnquiry(Enquiry enquiry) {
		studentEnquiries.remove(enquiry);
		staffIncharge.removeSuggestionFromInbox(enquiry);
	}
	public void deleteSuggestion(Suggestion suggestion) {
        suggestions.remove(suggestion);
        staffIncharge.removeSuggestionFromInbox(suggestion);
    }
	public void setSuggestion (String newSuggestion, int index) {
		suggestions.get(index).setSuggestion(newSuggestion);
	}
	
	
}
